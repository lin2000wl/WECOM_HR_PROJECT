---
description: 
globs: 
alwaysApply: true
---
# 技术栈文档：微信智能招聘机器人

## 1. 引言

本文档概述了构建"微信智能招聘机器人"项目所选用的主要技术、库和工具。明确技术栈有助于统一开发环境、指导技术选型决策，并为后续的开发和维护提供参考。

## 2. 核心技术

*   **编程语言: Python (版本 3.8+)**
    *   **说明:** Python 拥有成熟的生态系统、丰富的第三方库以及广泛的社区支持，特别是在数据处理、Web 开发和 AI 集成方面表现出色，非常适合本项目的需求。选择较新的稳定版本以利用语言特性和库兼容性。
    *   **理由:** 社区活跃，LLM SDK/API 调用库、数据库驱动等关键组件都有良好的 Python 支持。

*   **微信交互框架: `wcferry`**
    *   **说明:** 一个 Python 库，用于与微信 PC 版客户端进行交互，提供了接收消息、发送消息、发送文件、获取联系人信息等底层能力。
    *   **理由:** 是实现微信机器人功能的基础，可以直接操作微信接口。 (注意：此项为项目早期版本技术，当前已迁移至企业微信框架)

*   **企业微信交互框架:**
    *   **FastAPI:** 用于构建接收企业微信回调的 ASGI Web 服务。
        *   **理由:** 高性能，易于学习，基于 Python 类型提示，代码简洁。
    *   **Uvicorn:** 作为 ASGI 服务器运行 FastAPI 应用。
        *   **理由:** FastAPI 官方推荐的服务器之一，性能良好。
    *   **企业微信 API 调用:** 通过 `httpx` 库直接调用企业微信官方 API。
        *   **理由:** `httpx` 支持同步和异步请求，是现代的 HTTP客户端。
    *   **WXBizMsgCrypt:** (通常由腾讯提供或使用可信的第三方实现 `pycryptodome` 作为依赖) 用于企业微信消息的加解密和签名校验。
        *   **理由:** 企业微信回调安全要求。

*   **大语言模型 (LLM): DeepSeek API**
    *   **说明:** 利用 DeepSeek 提供的 API 服务进行自然语言处理和信息提取。主要用于两个场景：
        1.  **查询指令解析:** 理解用户输入的自然语言招聘需求，并提取结构化的查询条件。
        2.  **简历信息提取:** 从 PDF 简历的文本内容中提取姓名、联系方式、工作经历、教育背景、技能等结构化信息。
        3.  **候选人简要对比分析生成**
    *   **理由:** 具备强大的自然语言理解和信息抽取能力，能处理多样化输入，减少硬编码规则，提升智能化水平。需要通过 HTTP 请求调用其 API。

## 3. 数据存储

*   **数据库: MongoDB**
    *   **说明:** 一个 NoSQL 文档型数据库。用于存储候选人的信息，包括：
        *   基本信息 (姓名、联系方式等)。
        *   从简历中提取的结构化详细信息 (工作经历、教育背景、技能等，可以直接存为嵌套文档或数组)。
        *   标准化后的简历 PDF 文件路径 (`resume_pdf_path`)。
        *   可能的候选人微信 ID (`wxid`)。
    *   **理由:** 灵活性高，易于存储和演进半结构化的简历数据和 LLM 返回的 JSON 结果。Schema less 的特性方便快速迭代。`pymongo` 是成熟的 Python 驱动。
    *   **备选:** PostgreSQL (如果需要强事务或更复杂的结构化查询)。

## 4. Supporting Libraries & Tools

*   **HTTP 请求库: `requests`**
    *   **说明:** 用于向 DeepSeek LLM API 发送 HTTP 请求。 *(注意：当前实现已改为使用 `openai` 库)*
    *   **理由:** 简单易用，是 Python 中进行 HTTP 调用的事实标准。 *(当前未使用，但保留以备将来可能的其他 HTTP 调用)*

*   **HTTP 客户端库: `httpx`**
    *   **说明:** 用于向企业微信 API 和 DeepSeek LLM API (如果 `openai` 库底层使用或未来切换) 发送 HTTP/HTTPS 请求。支持异步操作，适合 FastAPI。
    *   **理由:** 现代、功能齐全的 HTTP 客户端，支持同步和异步。

*   **OpenAI SDK: `openai`**
    *   **说明:** 用于与 DeepSeek LLM API (兼容 OpenAI 接口) 进行交互。
    *   **理由:** 提供了便捷的方式来调用聊天补全接口，并处理响应和常见错误（如速率限制）。

*   **PDF 文本提取: `PyPDF2` 或 `pdfminer.six`**
    *   **说明:** 用于从 PDF 文件中直接提取文本内容。
    *   **理由:** 是处理 PDF 文本的基础库。需要根据实际效果选择或组合使用。

*   **光学字符识别 (OCR): `pytesseract` (Tesseract OCR 引擎的 Python 包装器)**
    *   **说明:** 当 PDF 是图片格式或直接文本提取效果不佳时，用于识别图像中的文字。
    *   **理由:** 开源且广泛使用，效果较好，但需要在系统中安装 Tesseract OCR 引擎。此为简历处理流程中的可选但推荐的组件。

*   **XML 处理: `xmltodict`**
    *   **说明:** 用于将企业微信回调消息中的 XML 格式数据转换为 Python 字典，反之亦然 (如果需要构造 XML 响应)。
    *   **理由:** 简洁易用，方便处理 XML 数据。

*   **加密库: `pycryptodome`**
    *   **说明:** 作为 `WXBizMsgCrypt` (企业微信消息加解密库) 的常见依赖，提供底层的加密算法支持。
    *   **理由:** 功能全面的加密库。

*   **配置文件管理: YAML (`PyYAML` 库) 或 `.env` (`python-dotenv` 库)**
    *   **说明:** 用于管理敏感信息（如 API Key, 数据库密码）和应用配置（如授权用户列表, 文件路径, LLM 模型名称等）。
    *   **理由:** 将配置与代码分离，提高安全性和可维护性。YAML 可读性好，适合复杂配置；`.env` 简单，适合环境变量式配置。

*   **日志记录: Python 内建 `logging` 模块**
    *   **说明:** 用于记录应用程序的运行信息、警告和错误。
    *   **理由:** Python 标准库自带，功能强大且灵活，易于配置不同级别的日志输出到控制台或文件。

*   **后台任务调度 (可选): `APScheduler` 或 `schedule`**
    *   **说明:** 用于实现简历处理流程的定时自动触发。
    *   **理由:** `APScheduler` 功能更全面，支持多种调度方式；`schedule` 语法更简洁，适合简单定时任务。也可以考虑使用操作系统的任务计划程序 (Windows) 或 Cron (Linux)。

*   **缓存 (可选): Redis 或 内存字典**
    *   **说明:** 用于临时存储用户交互过程中的状态，例如用户选择候选人时的序号与候选人信息的映射。
    *   **理由:** Redis 提供持久化和分布式能力，更健壮；对于单实例简单场景，Python 的内存字典（带过期管理）可能足够。

*   **[v1.1 调整] 缓存: `cachetools`**
    *   **说明:** 用于临时存储用户交互过程中的状态，并实现 TTL 超时。
    *   **理由:** 提供了线程安全的 `TTLCache`，满足并发和状态超时需求。

*   **[v1.1 新增] 并发处理: Python 内建 `threading` 模块**
    *   **说明:** 使用 `ThreadPoolExecutor` 管理线程池，实现并发处理用户请求。
    *   **理由:** Python 标准库自带，适用于 IO 密集型任务。

## 5. 开发与部署环境

*   **操作系统: Windows 或 Linux**
    *   **说明:** FastAPI 应用可以跨平台部署。如果使用了特定于 Windows 的组件 (如旧版 `wcferry` 相关的或 Tesseract OCR 的特定安装)，则需注意。企业微信回调服务器通常部署在 Linux 服务器。
    *   **开发环境:** 推荐与部署环境保持一致，或使用虚拟机/容器模拟。

*   **微信客户端:** (此项不再直接相关于机器人服务端，用户通过企业微信客户端或企业微信应用交互)

*   **企业微信配置:**
    *   需要在企业微信管理后台创建自建应用。
    *   配置应用的回调 URL 指向部署的 FastAPI 服务器。
    *   获取 CorpID, AgentID, Secret, Token, AESKey 等参数。

*   **Web 服务器/反向代理 (生产环境): Nginx 或 Caddy**
    *   **说明:** 用于处理 HTTPS、负载均衡、静态文件服务等。
    *   **理由:** 提高安全性、性能和可管理性。

*   **Python 环境管理:** 推荐使用 `venv` 或 `conda` 来创建独立的虚拟环境，以管理项目依赖。

*   **版本控制:** Git (配合 GitHub, GitLab, Gitee 等代码托管平台)。

## 6. 关键技术选型理由总结

*   **LLM (DeepSeek):** 核心优势在于强大的 NLU 和信息抽取能力，提升智能化和对用户输入的容忍度，简化了规则维护。
*   **MongoDB:** 灵活适应简历数据和 LLM 输出，简化开发初期的数据建模。
*   **`wcferry`:** 实现微信集成的直接途径。 (此项为旧版技术)
*   **企业微信集成 (FastAPI, httpx, WXBizMsgCrypt):** 实现企业微信回调处理和 API 交互的现代Python Web 技术栈。
*   **[v1.1 新增] `threading`:** 标准库实现并发。
*   **[v1.1 新增] `cachetools`:** 提供带 TTL 的线程安全缓存。
