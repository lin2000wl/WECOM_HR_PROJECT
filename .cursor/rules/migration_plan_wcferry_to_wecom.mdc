---
description: 
globs: 
alwaysApply: true
---
**项目迁移实施方案：`wcferry` 到企业微信框架**

**1. 项目目标：**

*   将现有"微信智能招聘机器人"的核心功能完整迁移到企业微信自建应用框架。
*   确保机器人在企业微信环境下稳定运行，并能利用企业微信的特性。
*   保持现有业务逻辑（LLM交互、数据库操作、简历处理流程、状态管理等）的完整性和可复用性。
*   更新所有相关文档以反映新的企业微信架构。

**2. 核心原则：**

*   **模块化迁移：** 逐个模块进行分析、适配和测试。
*   **代码复用：** 最大程度复用与微信交互无关的核心业务逻辑代码。
*   **配置驱动：** 企业微信相关的配置（CorpID, AgentID, Secret, Token, AESKey, 授权用户UserID等）通过 `.env` 和 `config_ew.py` 管理。
*   **文档同步：** 严格按照 RULE-DEV-001，每完成一个模块的迁移和测试，立即更新 `.cursor/rules/` 下的对应文档。

**3. 迁移阶段与任务分解：**

**阶段一：环境搭建与基础认证 (企业微信)**

*   **任务 1.1: 企业微信应用配置与回调服务器基础 (对应 `enterprise_wechat_development_guide.mdc` 章节 1 & 3.1, 3.2)**
    *   **【状态：已完成】**
    *   **负责人：** AI助手 (代码部分), 用户 (企业微信后台配置)
    *   **详细步骤：**
        1.  **[用户]** 完成企业微信后台自建应用创建、回调URL配置（指向本地开发环境的公网映射地址）。
        2.  **[AI]** 搭建FastAPI基础应用 (`src/main_ew.py`)。
        3.  **[AI]** 实现回调URL验证端点 (GET `/api/v1/wecom/callback`)，集成 `WXBizMsgCrypt` 进行签名校验和 `echostr` 返回。
        4.  **[AI]** 实现配置文件 `config_ew.py` 加载企业微信相关配置从 `.env`。
        5.  **[AI & 用户]** 测试回调URL验证通过。
    *   **验收标准：** 企业微信后台回调URL验证成功。
    *   **文档更新：** 初始化或更新 `enterprise_wechat_development_guide.mdc`，记录此步骤。

*   **任务 1.2: `access_token` 管理模块 (对应 `enterprise_wechat_development_guide.mdc` 章节 2.1)**
    *   **【状态：已完成 - 核心代码与测试脚本】**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 在 `src/enterprise_wechat_service.py` 中实现 `EnterpriseWeChatService` 类。
        2.  **[AI]** 实现 `get_access_token()` 方法，包括从企微API获取、内存缓存、过期判断和线程安全的刷新逻辑。
        3.  **[AI]** 编写单元测试验证 `access_token` 获取和刷新。
    *   **验收标准：** `access_token` 能够正确获取、缓存和自动刷新。单元测试通过。
    *   **文档更新：** 完善 `enterprise_wechat_service.py` 的说明。

*   **任务 1.3: 消息接收与加解密模块 (对应 `enterprise_wechat_development_guide.mdc` 章节 3.3)**
    *   **【状态：已完成】**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 在 `src/main_ew.py` 中实现回调消息接收端点 (POST `/api/v1/wecom/callback`)。
        2.  **[AI]** 集成 `WXBizMsgCrypt` 的 `DecryptMsg` 方法解密接收到的XML消息。
        3.  **[AI]** 实现XML到Python字典的转换 (使用 `xmltodict`)。
        4.  **[AI]** 初步记录解密后的消息内容和关键字段（`FromUserName`, `MsgType`, `Content`, `AgentID`）。
        5.  **[用户 & AI]** 用户从企业微信发送测试文本消息给应用，验证回调服务器能正确接收、解密并记录日志。
    *   **验收标准：** 后台日志能正确显示从企微应用发送的测试消息的解密内容。
    *   **文档更新：** 详细记录回调服务器的消息处理流程。

**阶段二：核心交互逻辑适配**

*   **任务 2.1: 消息发送服务适配 (对应 `enterprise_wechat_development_guide.mdc` 章节 2.2 & 4.3)**
    *   **【状态：已完成 - 核心代码与单元/集成测试】**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 在 `EnterpriseWeChatService` 中实现 `send_text_message` 方法，用于发送文本消息给指定用户。
        2.  **[AI]** 实现 `upload_temporary_media` 方法，用于上传文件到企微临时素材。
        3.  **[AI]** 实现 `send_file_message` 方法，用于发送文件消息（基于 `media_id`）。
        4.  **[AI]** 编写单元测试或集成测试，模拟调用这些发送接口。
    *   **验收标准：** 能够通过调用服务方法成功向测试用户发送文本和文件消息。
    *   **文档更新：** `enterprise_wechat_service.py` 的接口说明。

*   **任务 2.2: 用户授权逻辑迁移 (对应 `enterprise_wechat_development_guide.mdc` 章节 4.2)**
    *   **【状态：已完成 - AuthHandlerEw类及基础逻辑实现】**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 创建或修改 `src/handlers/auth_handler_ew.py`。
        2.  **[AI]** `AuthHandlerEw` 的授权校验逻辑改为读取 `config_ew.AUTHORIZED_USER_IDS` (企微 `UserID` 列表)。
        3.  **[AI]** 确保 `CoreProcessor` 在处理消息时首先调用此授权处理器。
    *   **验收标准：** 仅配置在 `AUTHORIZED_USER_IDS_EW` 中的用户发来的消息才能通过授权。
    *   **文档更新：** `auth_handler_ew.py` 的功能说明。

*   **任务 2.3: `CoreProcessor` 适配 (对应 `enterprise_wechat_development_guide.mdc` 章节 4.1)**
    *   **【状态：已完成 】**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 修改或创建 `CoreProcessor` (`src/core_processor_ew.py` 或在原文件适配)。
        2.  **[AI]** `CoreProcessor` 初始化时接收 `EnterpriseWeChatService` 实例。
        3.  **[AI]** 其主处理方法（如 `handle_wecom_message(parsed_msg_dict)`）现在接收从回调服务器解析出的字典格式消息。
        4.  **[AI]** 调整消息路由逻辑，根据 `parsed_msg_dict` 中的 `MsgType`, `FromUserName` 等字段进行处理。
        5.  **[AI]** 所有原先调用 `wcferry_interface` 发送消息的地方，改为调用 `self.wecom_service` 的相应方法。
    *   **验收标准：** `CoreProcessor` 能正确接收并初步处理来自企微的消息，并将发送操作委托给 `EnterpriseWeChatService`。
    *   **文档更新：** 更新 `CoreProcessor` 的架构图和交互说明。

*   **任务 2.4: `IntentHandler`, `QueryHandler`, `SelectionHandler` 适配**
    *   **负责人：** AI助手
    *   **状态：已完成**
    *   **详细步骤：**
        1.  **[AI]** 检查这些 `handlers`，确保其内部逻辑（LLM调用、数据库查询、状态管理Key的生成等）与企微的 `UserID` 体系兼容。 **(已完成)**
        2.  **[AI]** 特别注意 `SelectionHandler` 中对用户回复的解析，以及 `StateManager` 使用的 `key`（应为 `UserID`）。 **(已完成)**
        3.  **[AI]** 移除 `wcferry` 相关导入、替换消息发送依赖为 `EnterpriseWeChatService`。 **(已完成)**
    *   **验收标准：** 各 `handler` 模块的核心业务逻辑在企微消息上下文中已正确执行。
    *   **文档更新：** 已同步更新 `query_handler.py`, `selection_handler.py`, `intent_handler.py` 的接口和依赖说明。

*   **任务 2.5: `StateManager` 适配 (对应 `enterprise_wechat_development_guide.mdc` 章节 4.4)**
    *   **状态：已完成**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 确认 `StateManager` 使用的 `cache_key` 基于企微的 `UserID` (即回调消息中的 `FromUserName`)。 **(已完成)**
        2.  **[AI]** TTL等核心缓存逻辑保持不变。 **(已完成)**
        3.  **[AI]** 在 `StateManager` 中添加 `cache_results` 和 `update_state` 方法以兼容旧测试用例。 **(已完成)**
    *   **验收标准：** 用户会话状态能正确基于 `UserID` 进行缓存、检索和超时，旧测试用例通过。
    *   **文档更新：** `state_manager.py` 的说明。

*   **任务 2.6: 后续选择操作处理逻辑**
    *   **状态：已完成**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1. 实现 `CoreProcessor._handle_follow_up_task` 中针对"简历 X"、"信息 X"、"联系 X"、"A"、"B"等指令的解析与执行。 **(已完成)**
        2. 使用 `state_manager` 获取缓存上下文（查询条件、候选人列表、偏移量 `current_offset`、`has_more`、简历路径及序号映射）。 **(已完成)**
        3. 完整实现"简历 X"、"信息 X"、"联系 X"操作发送、刷新 TTL 和错误处理。 **(已完成)**
        4. 补充"查看更多 (A)"分页逻辑：再次查询、评分、缓存与发送下一批 Top N。 **(已完成)**
        5. 处理 'B' 操作：结束查询并清除状态。 **(已完成)**
    *   **文档更新：** 已完成 `query_handler.py`、`selection_handler.py`、`intent_handler.py` 等 Handler 文档及测试用例说明。
    *   **验收标准：** 用户能在后续交互中正确获取简历、信息、联系候选人、查看更多和结束查询指令。

*   **任务 2.7: 测试与微调**
    *   **状态：进行中**
    *   **负责人：** AI助手 & 用户
    *   **详细步骤：**
        1. 运行测试用例并修复发现的逻辑或异常处理问题。
        2. 根据测试结果微调分页逻辑、TTL 刷新和消息格式。
        3. 更新示例用法和文档，以提高可读性和可维护性。
    *   **验收标准：** 分页功能稳定，异常处理完备，文档和示例清晰。
    *   **文档更新：** 完善 `migration_plan_wcferry_to_wecom.mdc`、`enterprise_wechat_development_guide.mdc` 和相关示例。

**阶段三：端到端测试与简历处理迁移**

*   **任务 3.1: 核心交互流程端到端测试**
    *   **负责人：** 用户 & AI助手
    *   **详细步骤：**
        1.  **[用户 & AI]** 启动完整的企业微信版应用。
        2.  **[用户]** 作为授权用户，在企业微信应用内发送招聘查询指令。
        3.  **[AI & 用户]** 验证：
            *   机器人正确解析指令。
            *   正确查询数据库并返回候选人列表（含摘要）。
            *   用户可以正确选择"简历 X"、"信息 X"、"联系 X"（模拟联系）、"A"（查看更多）、"B"（结束）。
            *   状态超时机制按预期工作。
    *   **验收标准：** PRD中定义的核心用户交互流程在企业微信上完整可用。
    *   **文档更新：** 记录测试结果，更新用户操作手册（如果需要）。

*   **任务 3.2: 简历文件发送适配 (对应 `enterprise_wechat_development_guide.mdc` 章节 4.5)**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 确保当用户请求"简历 X"时，`SelectionHandler` 调用 `CoreProcessor`，后者再通过 `EnterpriseWeChatService` 的 `upload_temporary_media` 和 `send_file_message` 流程发送简历。
    *   **验收标准：** 用户能成功收到请求的简历PDF文件。
    *   **文档更新：** 文件发送流程说明。

*   **任务 3.3: 后台简历处理管道复用/适配**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** `ResumePipeline` 的核心逻辑（扫描、文本提取、LLM解析、校验、文件管理、DB更新）基本保持不变，因为它们不直接依赖微信交互层。
        2.  **[AI]** 确保 `db_interface.py` 和 `llm_client.py` 仍能被 `ResumePipeline` 正确调用。
        3.  **(可选适配)** 如果未来需要从企业微信应用接收用户上传的简历文件：
            *   在回调服务器中增加处理文件消息的逻辑。
            *   下载文件：`EnterpriseWeChatService` 提供一个方法，调用 `GET https://qyapi.weixin.qq.com/cgi-bin/media/get?access_token=ACCESS_TOKEN&media_id=MEDIA_ID`。
            *   将下载的文件路径传递给 `ResumePipeline` 的入口。
    *   **验收标准：** 后台简历处理流程能独立运行，并将结果正确存入数据库。
    *   **文档更新：** `ResumePipeline` 的触发方式和（可选）企微文件输入方式。

**阶段四：优化、部署与文档最终化**

*   **任务 4.1: 错误处理与日志完善**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 全面审查代码，确保所有企微API调用都有健壮的错误捕获和日志记录。
        2.  **[AI]** 确保回调服务器的异常能被妥善处理，并返回企微期望的响应。
        3.  **[AI]** 统一日志格式和级别，方便问题排查。
    *   **验收标准：** 系统在各种异常情况下表现稳定，日志信息充分。
    *   **文档更新：** 错误处理策略和常见错误码说明。

*   **任务 4.2: 性能与安全考虑**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 检查 `access_token` 的获取是否有效率（避免不必要的重复获取）。
        2.  **[AI]** 评估LLM和数据库调用的耗时，确保在用户可接受范围内。
        3.  **[AI]** 确保所有敏感配置（API Secret, Token, AESKey等）都通过 `.env` 管理，并且 `.env` 文件不在版本控制中。
    *   **验收标准：** 系统响应及时，配置安全。
    *   **文档更新：** 安全和性能相关的配置建议。

*   **任务 4.3: 部署准备与 `README_EW.md` 编写 (对应 `enterprise_wechat_development_guide.mdc` 章节 5)**
    *   **负责人：** AI助手
    *   **详细步骤：**
        1.  **[AI]** 准备生产环境部署脚本或说明（如使用Docker, Supervisor等）。
        2.  **[AI]** 编写详细的 `README_EW.md`，包含：
            *   项目简介（企业微信版）
            *   环境要求 (Python, MongoDB, 企微应用配置等)
            *   安装步骤 (依赖安装, `.env` 配置)
            *   本地运行指南 (uvicorn, 内网穿透)
            *   部署指南
            *   主要模块说明
    *   **验收标准：** `README_EW.md` 清晰完整，能够指导新用户部署和运行。
    *   **文档更新：** 将 `README_EW.md` 作为主要的项目入口文档。

*   **任务 4.4: 最终文档审查与定稿**
    *   **负责人：** AI助手 & 用户
    *   **详细步骤：**
        1.  **[AI & 用户]** 审查所有 `.cursor/rules/` 下的文档，包括本实施方案、`architecture.mdc` (更新为企微版架构)、`prd.mdc` (企业微信版)、`enterprise_wechat_development_guide.mdc` 等，确保它们与最终实现一致。
    *   **验收标准：** 所有项目文档准确、最新且互相一致。
    *   **文档更新：** 完成所有文档的最终修订。

**4. 风险与应对：**

*   **企业微信API理解偏差：** 仔细阅读官方文档，通过小批量测试验证API行为。
*   **回调调试困难：** 使用内网穿透工具，详细记录回调日志。
*   **LLM解析在企微场景下的适配：** 针对企微用户可能的表达习惯，微调Prompt。
*   **迁移工作量超出预期：** 严格按模块分步进行，优先核心功能。

本实施方案提供了一个从 `wcferry` 迁移到企业微信的结构化路径。在执行过程中，请严格遵守"先计划—再开发—后测试—同步文档"的规则。






