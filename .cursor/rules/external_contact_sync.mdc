---
description: 
globs: 
alwaysApply: true
---
# 实施计划：外部联系人ID同步与标记

**功能名称：** 外部联系人ID同步与标记 (External Contact ID Sync & Tagging)

**版本历史：**
*   v1.0 (YYYY-MM-DD): 初始实施计划创建。

**实施计划遵循：**
本文档遵循 **RULE-DEV-001 (AI 助手逐步开发与文档同步规则)**。每完成一个模块的开发、自测，将立即更新本文档及相关项目文档。

## 1. 目标

*   实现从企业微信批量获取外部联系人（客户）的详细信息，特别是 `external_userid`、备注 (`remark`) 和标签 (`tags`)。
*   根据客户的备注信息（通常包含姓名和手机号后四位）匹配内部MongoDB数据库中的候选人记录。
*   将成功匹配的客户的 `external_userid` 更新到内部数据库对应的候选人条目中。
*   为已成功同步 `external_userid` 到内部数据库的外部联系人，在企业微信端打上特定的"已同步"标签。
*   对于未能成功匹配或更新的外部联系人，向HR用户发送通知。
*   功能可以通过HR发送特定指令触发，或按预设时间间隔（如每小时）自动触发。

## 2. 范围

### 2.1 功能范围 (In Scope)

*   通过企业微信API分页批量获取指定HR成员名下的外部联系人列表。
*   解析外部联系人的 `external_userid`、`remark`、`tags`（特别是 `tag_id`）。
*   筛选出未标记为"已同步"的外部联系人。
*   根据外部联系人的 `remark`（格式假定为：姓名+手机号后四位）尝试与内部数据库 `candidates` 集合中的记录进行匹配。
*   如果匹配成功，更新内部数据库中对应候选人的 `external_userid` 字段。
*   为成功更新到内部数据库的外部联系人，通过API添加预定义的"已同步"企业标签。
*   记录同步失败的外部联系人（备注、`external_userid`）并通知HR。
*   支持手动指令触发同步流程。
*   支持定时任务自动触发同步流程。
*   错误处理和日志记录。

### 2.2 非功能范围 (Out of Scope)

*   自动创建企业微信标签（"已同步"标签需预先在企业微信后台手动创建，或通过单独的管理脚本创建，其ID配置在系统中）。
*   处理外部联系人备注格式不规范导致无法匹配的情况（将视为匹配失败并通知）。
*   复杂的双向同步逻辑（当前为单向：从企业微信到内部数据库的 `external_userid` 同步）。
*   实时同步（当前为批量按需或定时同步）。
*   处理企业微信API调用频率超限之外的复杂重试策略（会实现基本的错误捕获和日志）。

## 3. 输入/输出

### 3.1 输入

*   **手动触发：**
    *   HR用户的企业微信 `UserID`。
    *   特定的触发指令文本 (例如："更新外部联系人")。
*   **自动触发：**
    *   预设的定时任务配置（例如，每小时执行）。
    *   配置中需要同步的HR成员 `UserID` 列表。
*   **配置信息 (`config_ew.py` / `.env`):**
    *   企业微信应用配置 (CorpID, AgentID, Secret等)。
    *   需要执行同步操作的HR成员 `UserID` 列表 (用于自动任务和权限校验)。
    *   预定义的"已同步成功"的企业微信标签 `TAG_ID_SYNC_SUCCESS`。
    *   MongoDB连接信息。
*   **来自企业微信API的数据：**
    *   外部联系人列表（包含 `external_userid`, `remark`, `tags` 等）。

### 3.2 输出

*   **数据库更新：** 内部MongoDB `candidates` 集合中，匹配到的候选人记录会更新其 `external_userid` 字段。
*   **企业微信标签更新：** 成功同步的外部联系人会被打上 `TAG_ID_SYNC_SUCCESS` 标签。
*   **通知HR：**
    *   处理完成后，向发起操作的HR（或配置的管理员，对于自动任务）发送一条总结消息。
    *   消息内容包括本次同步的简要统计和同步失败的联系人列表（格式：`以下联系人添加失败：[备注] [外部联系人id]`）。
*   **日志：** 详细的操作日志，包括API调用、数据处理、成功与失败的记录。

## 4. 依赖项

### 4.1 内部模块

*   `src/config_ew.py`: 加载企业微信和应用配置，包括 `TAG_ID_SYNC_SUCCESS` 和需要同步的HR `UserID` 列表。
*   `src/enterprise_wechat_service.py`: 需要扩展以包含新的企业微信API调用方法（批量获取客户详情、编辑客户标签）。
*   `src/db_interface.py`: 用于查询和更新MongoDB中的 `candidates` 记录。
*   `src/core_processor_ew.py` (或新模块 `src/processors/sync_processor.py`): 实现核心同步逻辑。
*   `src/main_ew.py`: (如果手动指令触发) 需要添加新的消息处理路由。
*   `src/logger.py`: 用于日志记录。
*   (可选) `apscheduler` 或类似调度库集成：用于定时任务。

### 4.2 外部服务

*   企业微信API：
    *   `获取access_token`
    *   `批量获取客户详情` (`/cgi-bin/externalcontact/batch/get_by_user`)
    *   `编辑客户企业标签` (`/cgi-bin/externalcontact/mark_tag`)
*   MongoDB数据库服务。

## 5. 风险评估与应对策略

| 潜在风险                                     | 可能性 | 影响 | 缓解与应对策略                                                                                                                                                             |
| :------------------------------------------- | :----- | :--- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 企业微信API频率限制                          | 中     | 中   | 遵循官方文档的频率建议；在分页获取数据时加入适当延时；记录API错误，若因频率超限，在日志中明确提示，并考虑在后续迭代中加入更智能的重试退避机制。                                       |
| 外部联系人备注 (`remark`) 格式不统一或信息不足 | 高     | 中   | 严格按照"姓名+手机号后四位"的约定进行匹配。无法匹配的视为同步失败并在通知中列出，提示HR检查或规范备注。不尝试复杂的模糊匹配以避免错误更新。                                                   |
| 内部数据库候选人信息不准确或不存在             | 中     | 中   | 如果根据备注在内部数据库找不到唯一匹配的候选人，则视为同步失败，并在通知中列出。                                                                                                   |
| "已同步成功"标签ID配置错误或标签被删除       | 低     | 高   | 启动时检查配置的标签ID是否有效（例如，尝试获取标签信息）；在API调用失败时检查错误码，如果是标签相关问题，在日志和通知中明确指出。                                                          |
| 批量获取客户数据量过大导致处理超时           | 中     | 中   | API本身支持分页，确保分页逻辑正确实现。如果单次同步任务（所有分页）处理时间过长，考虑优化匹配逻辑或在自动任务场景下分批处理不同的HR。记录每个HR的处理耗时。                                 |
| `external_userid` 与内部候选人错误匹配      | 低-中  | 高   | 严格依赖备注格式进行匹配。在通知HR失败列表时，包含备注和`external_userid`，方便HR核对。初期上线可考虑增加人工审核环节或仅通知不自动打标。                                            |
| 企业微信API接口变更                          | 低     | 高   | 关注企业微信开发者文档的更新日志。编写集成测试，定期运行以快速发现API不兼容问题。                                                                                                     |

## 6. 详细任务分解

### 模块1: 配置与触发机制

*   **任务1.1:** 在 `.env` 和 `config_ew.py` 中添加新配置：
    *   `TAG_ID_SYNC_SUCCESS`: 预定义的"已同步成功"的企业微信标签ID。
    *   `SYNC_HR_USERIDS`: 需要执行自动同步的HR成员 `UserID` 列表 (逗号分隔字符串)。
    *   `SYNC_SCHEDULE_CRON` (可选): 定时任务的CRON表达式 (例如，`0 * * * *` 每小时执行一次)。
    *   **负责人:** AI
    *   **状态:** 待开发
*   **任务1.2:** 手动指令触发逻辑：
    *   在 `src/main_ew.py` 或 `src/core_processor_ew.py` 中，为授权的HR（可配置为特定管理员或发起同步的HR本身）添加一个新的消息指令（如 "更新外部联系人" 或 "/sync_contacts")。
    *   接收到指令后，调用核心同步处理模块。
    *   **负责人:** AI
    *   **状态:** SAP
*   **任务1.3:** 定时任务触发逻辑：
    *   集成 `apscheduler` 或使用现有项目的调度机制。
    *   根据 `SYNC_SCHEDULE_CRON` 配置，定时为 `SYNC_HR_USERIDS`列表中的每个HR触发核心同步处理模块。
    *   **负责人:** AI
    *   **状态:** 待开发

### 模块2: 企业微信API服务层扩展 (`src/enterprise_wechat_service.py`)

*   **任务2.1:** 实现 `async def batch_get_external_contacts(self, hr_userid: str, cursor: str = None, limit: int = 100) -> dict:` 方法。
    *   调用 `POST /cgi-bin/externalcontact/batch/get_by_user` API。
    *   处理分页逻辑 (`cursor`, `next_cursor`)。
    *   返回API的原始JSON响应或处理过的客户列表及下一页游标。
    *   包含错误处理和日志记录。
    *   **负责人:** AI
    *   **状态:** 待开发
*   **任务2.2:** 实现 `async def mark_external_contact_tags(self, operator_userid: str, external_userid: str, add_tag_ids: list[str] = None, remove_tag_ids: list[str] = None) -> bool:` 方法。
    *   调用 `POST /cgi-bin/externalcontact/mark_tag` API。
    *   传入操作者 `operator_userid` (通常是执行同步的HR或机器人应用的 `userid`)。
    *   处理成功/失败响应。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `src/enterprise_wechat_service.py` 中实现)

### 模块3: 核心同步逻辑 (新模块 `src/processors/sync_processor.py` 或在 `src/core_processor_ew.py` 中扩展)

*   **任务3.1:** 创建 `SyncProcessor` 类或相关函数。
    *   已在 `src/processors/sync_processor.py` 中创建 `SyncProcessor` 类。
    *   **负责人:** AI
    *   **状态:** 已完成
*   **任务3.2:** 实现主同步方法 `async def run_sync_for_hr(self, hr_userid: str, triggered_by_manual_command: bool = False)`:
    *   初始化计数器（总客户数、待检查数、成功更新数、失败数等）。
    *   循环调用 `enterprise_wechat_service.batch_get_external_contacts` 获取指定 `hr_userid` 的所有外部联系人，处理分页。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor` 中实现，包括分页获取逻辑和 `MAX_PAGES_TO_FETCH` 保护)
*   **任务3.3:** 筛选逻辑：
    *   遍历获取到的外部联系人列表。
    *   检查每个联系人的 `tags` 是否已包含 `TAG_ID_SYNC_SUCCESS`。如果已包含，则跳过。
    *   优先从 `external_contact.mobile` 获取手机号，其次尝试从 `follow_info.remark` 中通过正则表达式 (`1[3-9]\d{9}`)提取。
    *   如果两处均未找到有效手机号，则跳过该联系人。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor.run_sync_for_hr` 中实现)
*   **任务3.4:** 备注解析与数据库匹配逻辑：
    *   对于未打"已同步"标签且提取到有效手机号的联系人：
    *   使用提取到的手机号 (`_extracted_phone_for_sync`) 调用 `db_interface.find_candidate_by_phone()` 在MongoDB中查询匹配的候选人。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor.run_sync_for_hr` 中实现)
*   **任务3.5:** 数据库更新逻辑：
    *   如果找到唯一匹配的候选人记录，并且该记录的 `external_wecom_id` 字段为空或与当前获取的 `external_userid` 不一致，则调用 `db_interface.update_candidate_by_id()` 更新该记录的 `external_wecom_id`。
    *   记录更新成功或失败。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor.run_sync_for_hr` 中实现)

### 模块4: 企业微信标签更新逻辑 (`SyncProcessor` 内)

*   **任务4.1:** 对于数据库更新成功的外部联系人（或者更准确地说，DB匹配成功的联系人）：
    *   检查 `config_ew.TAG_ID_SYNC_SUCCESS` 是否已配置。
    *   如果已配置，调用 `enterprise_wechat_service.mark_external_contact_tags` 为其添加 `TAG_ID_SYNC_SUCCESS` 标签。
    *   操作者 `userid` 为发起同步的 `hr_userid`。
    *   记录标签更新成功或失败，并相应更新 `successfully_synced_count` 或 `failed_to_sync_count`。
    *   如果未配置成功标签ID，则记录警告，并将此情况计入失败统计。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor.run_sync_for_hr` 中实现)

### 模块5: 结果汇报与通知 (`SyncProcessor` 内及 `EnterpriseWeChatService`)

*   **任务5.1:** 收集同步结果：
    *   在 `SyncProcessor.run_sync_for_hr` 中维护 `successfully_synced_count` 和 `failed_to_sync_count`。
    *   维护 `failed_contacts_processing_details` 列表，记录失败/未匹配联系人的外部ID、备注/名称和原因。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor.run_sync_for_hr` 中实现)
*   **任务5.2:** 构建通知消息：
    *   消息包含总获取数、筛选后待处理数、成功同步并标记数、失败/未匹配数。
    *   如果存在失败/未匹配记录，列出最多5条详情（外部ID、备注/名称、原因）。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor.run_sync_for_hr` 中实现)
*   **任务5.3:** 发送通知：
    *   如果任务是手动触发 (`triggered_by_manual_command == True`)，则向发起指令的 `hr_userid` 发送构建好的通知消息。
    *   如果是自动触发，则记录日志，未来可扩展为向管理员列表发送。
    *   使用 `enterprise_wechat_service.send_text_message`。
    *   **负责人:** AI
    *   **状态:** 已完成 (在 `SyncProcessor.run_sync_for_hr` 中实现)

### 模块6: 测试

*   **任务6.1:** 单元测试：
    *   测试备注解析逻辑。
    *   测试 `EnterpriseWeChatService` 中新API方法的参数构造和模拟响应处理。
    *   测试 `SyncProcessor` 的筛选、匹配逻辑（使用mock数据）。
*   **任务6.2:** 集成测试：
    *   测试从触发到完成通知的完整流程（需要连接到测试环境的企业微信和MongoDB）。
    *   测试分页获取客户的逻辑。
    *   测试标签的正确添加。
    *   测试手动触发和（模拟）定时触发。
*   **任务6.3:** 用户验收测试 (UAT)：
    *   由HR用户在测试环境实际操作，验证功能符合预期。
    *   **负责人:** AI (编写测试用例), 用户 (执行UAT)
    *   **状态:** 待开发

### 模块7: 文档更新

*   **任务7.1:** 更新本实施计划文档 (`.cursor/rules/external_contact_sync.mdc`) 各模块的完成状态和遇到的问题。
*   **任务7.2:** 更新架构文档 (`architecture.mdc`)：如果引入了新的主要组件或显著改变了数据流，进行更新。
*   **任务7.3:** 更新需求文档 (`prd.mdc`)：添加新功能描述。
*   **任务7.4:** 更新 `README_EW.md`：添加新功能的配置说明和使用方法。
*   **任务7.5:** 更新代码内注释，特别是新方法和复杂逻辑。
    *   **负责人:** AI
    *   **状态:** 待开发

## 7. 企业微信API使用详情 (基于文档链接)

### 7.1 批量获取客户详情 (`batch/get_by_user`)

*   **API Endpoint:** `POST https://qyapi.weixin.qq.com/cgi-bin/externalcontact/batch/get_by_user?access_token=ACCESS_TOKEN`
*   **请求体 (JSON):**
    ```json
    {
       "userid_list": ["hr_userid_1", "hr_userid_2"], // 发起批量获取的成员userid列表，最多支持100个
       "cursor": "NEXT_CURSOR_FROM_LAST_CALL", // 上一次调用时返回的next_cursor，第一次或者从头开始拉取时无需填写
       "limit": 100 // 返回数据的最大数，最多不超过100
    }
    ```
*   **关键响应字段解析：**
    *   `errcode`, `errmsg`
    *   `external_contact_list[]`:
        *   `external_contact`: 包含 `external_userid`, `name`, `type`, `avatar`, `gender`, `unionid`。
        *   `follow_info`: 包含 `userid` (添加此客户的成员), `remark`, `description`, `createtime`, `tag_id` (客户被打的标签id列表), `remark_corp_name`, `remark_mobiles`, `oper_userid` (对此外部联系人进行打标签等后续操作的成员userid，默认为添加人), `add_way`。
    *   `next_cursor`: 分页游标，下次请求时传入，如果此字段为空表示没有更多数据。
*   **注意事项:**
    *   需要具有「客户联系」使用权限的成员 `userid`。
    *   `limit` 最大100，需要循环调用直到 `next_cursor` 为空。
    *   参考文档: [批量获取客户详情](mdc:https:/developer.work.weixin.qq.com/document/path/92994) (虽然您提供的链接是 `92114` 通用客户管理，但批量接口更适合此场景，其路径通常为 `92994`。我将以 `92994` 的批量接口为准，因为它更符合"批量"需求。)

### 7.2 编辑客户企业标签 (`mark_tag`)

*   **API Endpoint:** `POST https://qyapi.weixin.qq.com/cgi-bin/externalcontact/mark_tag?access_token=ACCESS_TOKEN`
*   **请求体 (JSON):**
    ```json
    {
        "userid": "OPERATOR_USERID", // 执行操作的成员UserID
        "external_userid": "CUSTOMER_EXTERNAL_USERID",
        "add_tag": ["TAG_ID_TO_ADD_1", "TAG_ID_TO_ADD_2"], // 要为客户添加的标签id列表
        "remove_tag": ["TAG_ID_TO_REMOVE_1"] // 要为客户移除的标签id列表
    }
    ```
*   **关键响应字段解析：**
    *   `errcode`, `errmsg` (0表示成功)
*   **注意事项:**
    *   `userid` 必须是配置了客户联系「可使用成员」的成员。
    *   `add_tag` 和 `remove_tag` 最多一个列表长度为20。
    *   标签需要预先在企业微信后台创建好。
    *   参考文档: [编辑客户企业标签](mdc:https:/developer.work.weixin.qq.com/document/path/92118)

## 8. 核心数据流

```mermaid
graph TD
    subgraph Trigger
        A[HR发送 "/sync_contacts" 指令] --> C;
        B[定时任务触发 (每小时)] --> C;
    end

    C[SyncProcessor: run_sync_for_hr(hr_userid)] --> D{循环获取客户 (分页)};
    D -- API: batch_get_external_contacts --> E[企业微信服务器];
    E -- 客户列表, next_cursor --> D;
    D -- 完成/无更多 --> F[遍历本次获取的客户列表];

    subgraph ProcessEachContact
        F --> G{客户是否已打 "已同步" 标签?};
        G -- 是 --> F;
        G -- 否 --> H[解析 remark (姓名+手机后四位)];
        H --> I[DB: 查询 candidate (姓名, 手机后四位)];
        I -- 候选人信息 --> J{找到唯一匹配 & external_userid需更新?};
        J -- 是 --> K[DB: 更新 candidate.external_userid];
        K --> L[API: mark_tag (添加 "已同步" 标签)];
        L --> M[企业微信服务器];
        M -- 标签操作结果 --> N[记录成功/失败];
        N --> F;
        J -- 否 --> O[记录为同步失败];
        O --> F;
    end

    F -- 遍历完成 --> P[汇总失败列表];
    P --> Q[构建通知消息];
    Q -- API: send_text_message --> R[企业微信服务器];
    R -- 发送结果 --> S[通知HR/管理员];
    S --> T[结束];
```

## 9. 数据库变更

*   **`candidates` 集合:**
    *   可能需要确保 `external_userid` 字段存在。如果不存在，则在更新时添加。
    *   考虑为 `external_userid` 字段添加索引，如果后续会有基于此字段的查询。
    *   考虑为 `name` 和 `phone` (或解析出的手机号后四位部分) 字段的组合查询优化索引。

## 10. 测试策略

### 10.1 单元测试

*   **配置加载:** 测试 `config_ew.py` 是否能正确加载 `TAG_ID_SYNC_SUCCESS`, `SYNC_HR_USERIDS`, `SYNC_SCHEDULE_CRON`。
*   **备注解析:** `SyncProcessor` 中的备注解析函数，测试不同格式备注（正确格式、错误格式、边界情况）的解析结果。
*   **API服务层Mock测试:**
    *   `enterprise_wechat_service.batch_get_external_contacts`: Mock企微API响应，测试分页逻辑、空数据、错误响应处理。
    *   `enterprise_wechat_service.mark_external_contact_tags`: Mock企微API响应，测试成功/失败处理。
*   **`SyncProcessor` 核心逻辑Mock测试:**
    *   Mock `enterprise_wechat_service` 和 `db_interface`。
    *   测试客户筛选逻辑（是否已打标签）。
    *   测试数据库匹配逻辑（找到、未找到、找到多个）。
    *   测试数据库更新调用是否正确。
    *   测试标签更新调用是否正确。
    *   测试失败列表的构建。

### 10.2 集成测试

*   **环境:** 连接到测试企业微信环境和测试MongoDB实例。
*   **场景:**
    *   **手动触发:**
        *   HR发送同步指令，验证完整流程。
        *   测试不同HR `UserID` 的数据隔离。
    *   **定时触发 (模拟):** 手动调用定时任务的执行入口，验证是否为配置的 `SYNC_HR_USERIDS` 执行。
    *   **数据场景:**
        *   无外部联系人。
        *   少量外部联系人（无需分页）。
        *   大量外部联系人（需要分页）。
        *   部分联系人已打"已同步"标签。
        *   部分联系人备注规范，可匹配内部数据。
        *   部分联系人备注不规范，无法匹配。
        *   内部数据库无对应候选人。
        *   一个外部联系人匹配到多个内部候选人（应视为失败）。
        *   外部联系人 `external_userid` 已存在于内部数据库但与当前获取的不一致（应更新）。
    *   **验证点:**
        *   MongoDB中 `external_userid` 是否正确更新。
        *   企业微信端客户是否正确打上"已同步"标签。
        *   HR收到的通知消息内容是否准确（成功数、失败数、失败列表）。
        *   日志记录是否完整。
        *   API调用频率是否在合理范围（通过日志观察）。

### 10.3 用户验收测试 (UAT)

*   由实际HR用户在预生产或生产隔离环境进行测试。
*   提供清晰的测试用例和操作指南。
*   收集用户反馈。

## 11. 文档同步计划

*   **开发中:** 持续更新本实施计划文档 (`.cursor/rules/external_contact_sync.mdc`) 中各任务的状态、遇到的问题和解决方案。
*   **模块完成时:**
    *   更新 `src/enterprise_wechat_service.py`、`src/processors/sync_processor.py` 等新模块或修改模块的类/方法注释。
*   **功能完成时:**
    *   更新 `architecture.mdc`：如果新功能引入了重要的数据流或组件交互。
    *   更新 `prd.mdc`：在功能需求中详细描述此同步功能。
    *   更新 `README_EW.md`：
        *   添加新功能的配置项说明（如 `.env` 中的 `TAG_ID_SYNC_SUCCESS`, `SYNC_HR_USERIDS`, `SYNC_SCHEDULE_CRON`）。
        *   说明如何手动触发该功能。
        *   说明"已同步成功"标签需要在企业微信后台预先创建。
    *   最终审查所有相关文档的一致性和准确性。



